# -*- coding: utf-8 -*-
"""K-means Clustering .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Li1Js98xbLSp3-4W3hBH0FlYofzq3NGm
"""

#from google.colab import drive
#drive.mount('/content/drive')

#implementing k-means clustering
import numpy as np
from matplotlib import pyplot as plt

center_1 = np.array([1,1])
center_2 = np.array([5,5])
center_3 = np.array([8,1])
center_4 = np.array([1,8])
center_5 = np.array([13,13])
center_6 = np.array([13,5])

data_1 = np.random.randn(200, 2) + center_1
data_2 = np.random.randn(200,2) + center_2
data_3 = np.random.randn(200,2) + center_3
data_4 = np.random.randn(200, 2) + center_4
data_5 = np.random.randn(200,2) + center_5
data_6 = np.random.randn(200,2) + center_6

data = np.concatenate((data_1, data_2, data_3, data_4, data_5, data_6), axis = 0)

plt.scatter(data[:,0], data[:,1], s=7)

# Number of clusters
k = 6
n = data.shape[0]

c = data.shape[1]

mean = np.mean(data, axis = 0)
std = np.std(data, axis = 0)
centers = np.random.randn(k,c)*std + mean

# Plot the data and the centers generated as random
plt.scatter(data[:,0], data[:,1], s=7)
plt.scatter(centers[:,0], centers[:,1], marker='*', c='r', s=150)

#euclidean distance

def e_dis(a, centers):
  dis= []
  for i in range(0, len(centers), 1):
    dst = distance.euclidean(a, centers[i])
    dis.append(dst)
  m=min(dis)
  for i in range(0, len(centers), 1):
    if dis[i]==m:
      index=i
  return index

#plotting graph with different color
def plot_graph(centers, listt):
  color=['r', 'b', 'g', 'm', 'y', 'c']
  for i in range(len(listt)):
      list1= []
      list1=numpy.array(listt[i])
      plt.scatter(list1[:,0], list1[:,1], s=7, c=color[i])
      plt.scatter(centers[i,0], centers[i,1], marker='*', c='b', s=150)

#code of k-means clustering
import math
import numpy
from scipy.spatial import distance
print(centers)
listt=[[],[],[],[],[],[]]
present= []
for i in range(len(data)):
  present.append(0)
count=10
while(count>=10): #iterations
  count=0
  for j in range(0, len(data), 1):
    index=e_dis(data[j], centers)
    listt[index].append(data[j])

    if present[j]!=index:
      count+=1
    present[j]=index
  print("count: ", count)

  for k in range(0, len(listt), 1):
    if(len(listt[k])!=0):
      centers[k]=sum(listt[k])/len(listt[k])

  if(count<10):

   print(centers)
   plot_graph(centers, listt)
   break

  listt.clear()
  listt=[[],[],[],[],[],[]]
